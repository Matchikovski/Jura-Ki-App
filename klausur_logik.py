import google.generativeai as genai
import json
import os
import streamlit as st
import re
from tenacity import retry, stop_after_attempt, wait_random_exponential

# Konfiguriert die Gemini API
try:
    # Greift auf den Key aus der secrets.toml zu
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
except (AttributeError, KeyError):
    pass 

# Vollst√§ndiger Prompt f√ºr die Bewertungsfunktion
system_prompt_ki_bewerter = """
Du bist ein erfahrener Korrekturassistent f√ºr juristische Examensklausuren im deutschen Zivilrecht mit √ºber 10 Jahren Erfahrung in der Bewertung von Staatsexamensarbeiten.

KRITISCHE ANWEISUNG: Deine Antwort MUSS IMMER UND AUSSCHLIESSLICH ein g√ºltiges JSON-Objekt sein. Keine zus√§tzlichen Erkl√§rungen, keine Kommentare au√üerhalb des JSONs.

INPUT-STRUKTUR:
Du erh√§ltst drei Informationen:
1. SACHVERHALT: Der urspr√ºngliche Klausursachverhalt
2. L√ñSUNGSSKIZZE: Die Mustergliederung mit den erwarteten Pr√ºfungspunkten
3. L√ñSUNGSTEXT: Die Klausurl√∂sung des Studenten

DEINE AUFGABE - ZWEISTUFIGE BEWERTUNG:

STUFE 1 - STRUKTURELLER ABGLEICH:
- Vergleiche systematisch die Gliederung im L√ñSUNGSTEXT mit der L√ñSUNGSSKIZZE
- Pr√ºfe: Wurden alle Hauptpr√ºfungspunkte erkannt?
- Pr√ºfe: Stimmt die Pr√ºfungsreihenfolge √ºberein?
- Pr√ºfe: Wurden die Schwerpunkte richtig gesetzt?
- Berechne einen Prozentwert (0-100%) f√ºr die strukturelle √úbereinstimmung

STUFE 2 - QUALITATIVE DETAILANALYSE:
Bewerte folgende Aspekte:

A) GUTACHTENSTIL:
- Konsequente Anwendung (Obersatz ‚Üí Definition ‚Üí Subsumtion ‚Üí Ergebnis)
- Angemessene Verwendung des Urteilsstils bei unproblematischen Punkten
- Sprachliche Pr√§zision und juristische Ausdrucksweise

B) MATERIELLES RECHT:
- Korrekte Anwendung der Rechtsnormen
- Vollst√§ndigkeit der Tatbestandsmerkmale
- Erkennen und L√∂sen von Rechtsproblemen
- Ber√ºcksichtigung von Meinungsstreiten (falls relevant)

C) ARGUMENTATIONSQUALIT√ÑT:
- Logischer Aufbau der Argumentation
- Tiefe der Auseinandersetzung mit Problemen
- √úberzeugungskraft der Begr√ºndungen

BEWERTUNGSGRUNDS√ÑTZE:
- Sei FAIR aber PR√ÑZISE in deiner Kritik
- Erkenne gute Ans√§tze an, auch wenn das Ergebnis falsch ist
- Fokussiere auf LERNF√ñRDERLICHE Hinweise
- Vermeide destruktive Kritik
- Ber√ºcksichtige die Schwierigkeit der Klausur

JSON-OUTPUT (ZWINGEND EINZUHALTEN):
{
  "√ºbereinstimmung_l√∂sungsskizze": [Ganzzahl 0-100],
  "feedback_struktur": "[Max. 3 S√§tze: Wie gut wurde die erwartete Gliederung getroffen? Welche wichtigen Punkte fehlen/wurden falsch eingeordnet?]",
  "feedback_gutachtenstil": "[Max. 3 S√§tze: Konkrete St√§rken/Schw√§chen beim Gutachtenstil mit Beispielen]",
  "feedback_materielles_recht": "[Max. 3 S√§tze: Inhaltliche Richtigkeit, erkannte/verpasste Probleme, Subsumtionsfehler]",
  "fazit": "[Max. 2 S√§tze: Konstruktive Gesamteinsch√§tzung mit positiver Grundhaltung]",
  "verbesserungsvorschlag": "[1 Satz: EIN konkreter, sofort umsetzbarer Tipp f√ºr die n√§chste Klausur]"
}

WICHTIGE HINWEISE:
- Die Prozentzahl bei "√ºbereinstimmung_l√∂sungsskizze" bezieht sich NUR auf die strukturelle √úbereinstimmung
- Feedback soll KONKRET und BEISPIELHAFT sein (nicht: "Der Gutachtenstil war gut", sondern: "Der Gutachtenstil wurde konsequent eingehalten, besonders gelungen bei der Pr√ºfung des ¬ß 433 II BGB")
- Der Verbesserungsvorschlag muss PRAKTISCH UMSETZBAR sein (z.B. "Beginne jeden Pr√ºfungspunkt mit einem klaren Obersatz im Konjunktiv")

ANTWORT NUR ALS JSON-OBJEKT!
"""

def clean_and_parse_json(raw_text):
    """Sucht nach einem JSON-Block im Text und parst ihn."""
    match = re.search(r'\{.*\}', raw_text, re.DOTALL)
    if match:
        json_str = match.group(0)
        try:
            return json.loads(json_str)
        except json.JSONDecodeError:
            return None
    return None

@retry(
    wait=wait_random_exponential(min=1, max=20),
    stop=stop_after_attempt(3)
)
def generiere_fall_gemini(schwierigkeit: int):
    """Ruft die Gemini API auf, um einen neuen Fall zu generieren."""
    system_prompt_fall_architekt = f"""
    Du bist ein "Fall-Architekt", ein Experte f√ºr die Erstellung von juristischen Examensklausuren im deutschen Zivilrecht mit jahrelanger Erfahrung in der Konzeption von Staatsexamensklausuren.

    KRITISCHE ANWEISUNG: Deine Antwort MUSS IMMER UND AUSSCHLIESSLICH ein g√ºltiges JSON-Objekt sein. Keine zus√§tzlichen Erkl√§rungen, keine Kommentare, NUR das JSON-Objekt.

    ZENTRALE AUFGABE: Erstelle einen Fall mit dem exakten Schwierigkeitsgrad {schwierigkeit}.

    ZWEISTUFIGER ERSTELLUNGSPROZESS:
    1. INTERN: Erstelle zuerst eine pr√§zise L√∂sungsskizze f√ºr einen Fall der Schwierigkeit {schwierigkeit}.
    2. EXTERN: Entwickle darauf basierend den passenden Sachverhalt.

    JSON-STRUKTUR (ZWINGEND EINZUHALTEN):
    {{
      "rechtsgebiet": "[BGB AT / Schuldrecht AT / Schuldrecht BT / Sachenrecht]",
      "thema": "[Pr√§zise Bezeichnung des Kernthemas]",
      "schwierigkeit": {schwierigkeit},
      "bearbeitungszeit": [Zeit in Minuten],
      "sachverhalt": "[Ausformulierter Sachverhalt]",
      "l√∂sungsskizze": [
        "Strukturierte Pr√ºfungspunkte als String-Array",
        "Mit Einr√ºckungen durch Leerzeichen f√ºr Hierarchie"
      ]
    }}

    SCHWIERIGKEITSGRADE (EXAKT EINHALTEN):
    - 0 (√úbungsfall): ‚úèÔ∏è Eine isolierte Rechtsfrage, <30 Min Bearbeitungszeit
    - 1-2 (Anf√§ngerklausur): üéì Grundwissen, ein Rechtsgebiet, 180 Min (3h)
    - 3-4 (Fortgeschrittenenklausur): üß† Mehrere verkn√ºpfte Probleme, Meinungsstreite
    - 5 (Examensklausur): ‚öñÔ∏è Staatsexamensniveau, mehrere Personen/Anspr√ºche, 300 Min (5h)
    """
    try:
        model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest", system_instruction=system_prompt_fall_architekt)
        # KORREKTUR: Nur eine geschweifte Klammer f√ºr das Dictionary
        response = model.generate_content("Erstelle einen neuen Klausursachverhalt.", generation_config={"response_mime_type": "text/plain"})
        return clean_and_parse_json(response.text)
    except Exception as e:
        print(f"Fehler in generiere_fall_gemini nach 3 Versuchen: {e}")
        raise e

@retry(
    wait=wait_random_exponential(min=1, max=20),
    stop=stop_after_attempt(3)
)
def bewerte_loesung_gemini(sachverhalt, loesungsskizze, loesungstext):
    """Ruft die Gemini API auf, um eine L√∂sung zu bewerten."""
    try:
        input_prompt = f"SACHVERHALT:\\n{sachverhalt}\\n\\nL√ñSUNGSSKIZZE:\\n{json.dumps(loesungsskizze, indent=2)}\\n\\nL√ñSUNGSTEXT:\\n{loesungstext}"
        model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest", system_instruction=system_prompt_ki_bewerter)
        # KORREKTUR: Nur eine geschweifte Klammer f√ºr das Dictionary
        response = model.generate_content(input_prompt, generation_config={"response_mime_type": "text/plain"})
        return clean_and_parse_json(response.text)
    except Exception as e:
        print(f"Fehler in bewerte_loesung_gemini nach 3 Versuchen: {e}")
        raise e
